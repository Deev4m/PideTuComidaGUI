/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import com.google.gson.Gson;
import com.pidetucomida.gui.pojo.Producto;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dev
 */
public class AddProducto extends javax.swing.JFrame {

    String urlInsertar = "http://localhost:8080/PideTuComidaAPI/resources/api/productos/insert";

    /**
     * Creates new form AddProducto
     */
    public AddProducto() {
        initComponents();
        estilo();
    }

    public void estilo() {
        jTextAreaDescripcion.setLineWrap(true);
        jTextAreaDescripcion.setWrapStyleWord(true);

        setTitle("Añadir Producto");
        setLocationRelativeTo(null); // Se abre en el centro siempre
        // Cambiar el color de fondo a #014B10
        getContentPane().setBackground(Color.decode("#014B10"));
        jLabel1.setForeground(Color.WHITE);
        jLabel2.setForeground(Color.WHITE);
        jLabel3.setForeground(Color.WHITE);
        jLabel4.setForeground(Color.WHITE);

        // Para evitar que se redimensione la ventana al introducir una ruta
        jTextFieldRutaImagen.setPreferredSize(jTextFieldRutaImagen.getSize());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldNombreProducto2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonBuscarImagen = new javax.swing.JButton();
        jTextFieldRutaImagen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescripcion = new javax.swing.JTextArea();
        jTextFieldPrecioProducto = new javax.swing.JTextField();
        jButtonAceptar = new javax.swing.JButton();
        jButtonAtras = new javax.swing.JButton();
        jTextFieldNombreProducto = new javax.swing.JTextField();
        jComboBoxSeleccionableTipo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Nombre");

        jButtonBuscarImagen.setText("Buscar imagen");
        jButtonBuscarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarImagenActionPerformed(evt);
            }
        });

        jTextFieldRutaImagen.setEditable(false);

        jLabel2.setText("Precio");

        jLabel3.setText("Tipo");

        jLabel4.setText("Descripción");

        jTextAreaDescripcion.setColumns(20);
        jTextAreaDescripcion.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescripcion);

        jButtonAceptar.setText("Aceptar");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        jButtonAtras.setText("Atrás");
        jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtrasActionPerformed(evt);
            }
        });

        jComboBoxSeleccionableTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hamburguesa", "Pizza", "Kebab", "HotDog" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jButtonAtras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAceptar)
                .addGap(47, 47, 47))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonBuscarImagen)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPrecioProducto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(jTextFieldRutaImagen)
                            .addComponent(jTextFieldNombreProducto)
                            .addComponent(jComboBoxSeleccionableTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBuscarImagen)
                    .addComponent(jTextFieldRutaImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPrecioProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxSeleccionableTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAceptar)
                    .addComponent(jButtonAtras))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBuscarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarImagenActionPerformed
        // Para abrir el explorador de archivos y elegir una imagen
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Images", "jpg", "jpeg", "png", "gif"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File fichero = fileChooser.getSelectedFile();
            String imagenUrl = fichero.getAbsolutePath();
            System.out.println("URL de la imagen seleccionada: " + imagenUrl);
            jTextFieldRutaImagen.setText(imagenUrl);
        }
    }//GEN-LAST:event_jButtonBuscarImagenActionPerformed

    private void jButtonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtrasActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonAtrasActionPerformed

    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarActionPerformed

        String rutaImagen = jTextFieldRutaImagen.getText();
        String nombreProducto = jTextFieldNombreProducto.getText();
        String precioProducto = jTextFieldPrecioProducto.getText();
        String tipoSeleccionado = (String) jComboBoxSeleccionableTipo.getSelectedItem();
        String descripcion = jTextAreaDescripcion.getText();

        // Verificar si alguno de los campos requeridos está vacío
        if (rutaImagen.isEmpty() || nombreProducto.isEmpty() || precioProducto.isEmpty() || tipoSeleccionado.isEmpty() || descripcion.isEmpty()) {
            // Mostrar un aviso al usuario indicando que debe completar todos los campos
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            // Leer la imagen y convertirla en un arreglo de bytes
            File fichero = new File(rutaImagen);//digo que fichero es y directorio
            byte[] buff = null;
            if (fichero.exists()) {
                FileInputStream ficheroIn = new FileInputStream(fichero);//con esto leeré el fichero para convertirlo en un array de bytes
                long bytes = fichero.length();//cojo la longitud del fichero
                buff = new byte[(int) bytes];//creo un array de bytes de la misma longitud
                int i, j = 0;//declaro variables
                System.out.println("Lo recorro y lo meto en un buffer");
                while ((i = ficheroIn.read()) != -1) {//leo el fichero y lo guardo en un array de bytes
                    buff[j] = (byte) i;
                    j++;
                }
            }

            URL direccion = new URL(urlInsertar);
            HttpURLConnection conexion = (HttpURLConnection) direccion.openConnection();
            conexion.setRequestMethod("POST");
            conexion.setDoOutput(true);
            conexion.setRequestProperty("Content-Type", "application/json");

            Producto p = new Producto();
            p.setImg(buff);
            p.setNombre(nombreProducto);
            p.setPrecio(Double.parseDouble(precioProducto));
            p.setTipo(tipoSeleccionado);
            p.setDescripcion(descripcion);

            Gson gson = new Gson();
            String jsonProducto = gson.toJson(p);

            try (OutputStream outputStream = conexion.getOutputStream()) {
                byte[] input = jsonProducto.getBytes("utf-8");
                outputStream.write(input, 0, input.length);
            }
            // Obtener la respuesta del servidor
            int responseCode = conexion.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // El producto se insertó correctamente
                String response = "";
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(conexion.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response += line;
                    }
                }
                System.out.println("Respuesta del servidor: " + response);
            } else {
                // Ocurrió un error al insertar el producto
                System.out.println("Error en la solicitud. Código de respuesta: " + responseCode);
            }

            // Cerrar la conexión
            conexion.disconnect();
            // Limpiar los campos después de la inserción
            jTextFieldRutaImagen.setText("");
            jTextFieldNombreProducto.setText("");
            jTextFieldPrecioProducto.setText("");
            jComboBoxSeleccionableTipo.setSelectedIndex(0);
            jTextAreaDescripcion.setText("");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Debe poner un número en Precio. (Ejemplo: 10.20)", "Formato erróneo", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonAceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddProducto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonBuscarImagen;
    private javax.swing.JComboBox<String> jComboBoxSeleccionableTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDescripcion;
    private javax.swing.JTextField jTextFieldNombreProducto;
    private javax.swing.JTextField jTextFieldNombreProducto2;
    private javax.swing.JTextField jTextFieldPrecioProducto;
    private javax.swing.JTextField jTextFieldRutaImagen;
    // End of variables declaration//GEN-END:variables
}
